# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy ASP.Net app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: blackslopetest    # set this to the name of your Azure Web App
  # AZURE_WEBAPP_PACKAGE_PATH: './src'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '6.0'                 # set this to the .NET version to use
  CONTAINER_REGISTRY_URL: 'azuredemoregistry001.azurecr.io'
  IMAGE_NAME: 'blackslope/api-app'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: 'dev'

    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.CONTAINER_REGISTRY_URL }}/${{env.IMAGE_NAME}}:latest -f src/Dockerfile .
          docker push ${{ env.CONTAINER_REGISTRY_URL }}/${{env.IMAGE_NAME}}:latest

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'dev'

    steps:
    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
  
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'dev'

    steps:

    - name: Manual Approval for Staging
      uses: Azure/manual-intervention@v1
      with:
        message: "Review and approve the deployment to Staging."

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'dev'

    steps:

    - name: Manual Approval for Production
      uses: Azure/manual-intervention@v1
      with:
        message: "Review and approve the deployment to Production."

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
